import yfinance as yf
from get_tickers import get_tickers
from telegram_config import send_telegram_message

def calculate_macd(df):
    exp1 = df['Close'].ewm(span=12, adjust=False).mean()
    exp2 = df['Close'].ewm(span=26, adjust=False).mean()
    macd = exp1 - exp2
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

def check_macd_crosses():
    tickers = get_tickers()
    bullish_crosses = []
    bearish_crosses = []

    for ticker in tickers[:100]:  # limit for testing; remove slice for full list
        try:
            data = yf.download(ticker, period="2mo", interval="1d", progress=False, auto_adjust=True)
            if data.empty or len(data) < 30:
                continue

            macd, signal = calculate_macd(data)

            # Bullish crossover: MACD crosses above signal
            if macd.iloc[-2] < signal.iloc[-2] and macd.iloc[-1] > signal.iloc[-1]:
                bullish_crosses.append(ticker)

            # Bearish crossover: MACD crosses below signal
            elif macd.iloc[-2] > signal.iloc[-2] and macd.iloc[-1] < signal.iloc[-1]:
                bearish_crosses.append(ticker)

        except Exception as e:
            print(f"Error processing {ticker}: {e}")

    message_parts = []
    if bullish_crosses:
        message_parts.append("ðŸ“ˆ Bullish MACD Crossovers:\n" + "\n".join(bullish_crosses))
    if bearish_crosses:
        message_parts.append("ðŸ“‰ Bearish MACD Crossovers:\n" + "\n".join(bearish_crosses))

    if message_parts:
        send_telegram_message("\n\n".join(message_parts))
    else:
        print("No MACD crossovers detected.")

    return bullish_crosses, bearish_crosses

if __name__ == "__main__":
    check_macd_crosses()
